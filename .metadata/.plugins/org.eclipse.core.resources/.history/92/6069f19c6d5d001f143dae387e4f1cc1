package com.microservices.product.service;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.microservices.product.DTO.UpdatedProduct;
import com.microservices.product.model.ProductEntity;
import com.microservices.product.repository.ProductRepository;

@Service
public class ProductService {
	@Autowired
	ProductRepository productRepo;
	
	public int addProduct(ProductEntity product) throws Exception{
		Optional<ProductEntity> productInDbWithSameName = productRepo.findByProductName(product.getProductName());
		if(product!=null && productInDbWithSameName.isEmpty()) {
			System.out.println(Optional.ofNullable(product).toString());
			return productRepo.save(product).getProductId();
		}
		else throw new Exception("A Product with same name exist in DB. Please try with different name");
	}
	
	public ProductEntity fetchProductById(int productId) throws Exception{
		Optional<ProductEntity> productInDbWithGivenId = productRepo.findById(productId);
		if(productInDbWithGivenId.isPresent()) {
			return productInDbWithGivenId.get();
		}
		else throw new Exception("Invalid productId");
	}
	
	public String updateProduct(int productId, UpdatedProduct updatedProduct)throws Exception {
		Optional<ProductEntity> productInDbWithGivenId = productRepo.findById(productId);
		productInDbWithGivenId.ifPresentOrElse(
				productToUpdate->{
					
					updatedProduct.getProductName().ifPresent(productName-> productInDbWithGivenId.get().setProductName(productName));
					updatedProduct.getProductDescription().ifPresent(description-> productInDbWithGivenId.get().setProductDescription(description));
					updatedProduct.getProductPrice().ifPresent(price-> productInDbWithGivenId.get().setProductPrice(price));
					System.out.println(Optional.ofNullable(productInDbWithGivenId).toString());
					productRepo.save(productInDbWithGivenId.get());
				}, 
				()->{
					throw new RuntimeException(new Exception("Invalid ProductId"));
				});
		return "Product updated successfully :)";
	}
	
	public String deleteProductById(int productId) throws Exception{
		Optional<ProductEntity> productInDb = productRepo.findById(productId);
		productInDb.ifPresentOrElse(
				product-> productRepo.deleteById(productId),
				()->{
					throw new RuntimeException("Invalid ProductId");
				});
		return "Product deleted successfully :(";
	}

}

