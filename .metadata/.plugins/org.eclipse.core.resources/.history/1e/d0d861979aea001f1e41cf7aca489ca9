package com.microservices.api.gateway.security;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Date;
import java.util.stream.Collectors;

import javax.crypto.SecretKey;

import org.springframework.core.env.Environment;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.filter.OncePerRequestFilter;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

public class JwtTokenGeneratorFilter extends OncePerRequestFilter {

	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
			throws ServletException, IOException {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		
		if(null != authentication) {
			Environment environment = getEnvironment();
			if(null != environment) {
				String secret = environment.getProperty(ApplicationConstatns.JWT_SECRET_KEY, 
						ApplicationConstatns.JWT_SECRET_DEFAULT_VALUE);
				SecretKey secretKey = Keys.hmacShaKeyFor(secret.getBytes(StandardCharsets.UTF_8));
				String jwt = Jwts.builder()
						.setIssuer("api-gateway")
						.setSubject("JWTToken")
						.claim("username", authentication.getName())
						.claim("authorities", authentication.getAuthorities()
								.stream().map(GrantedAuthority::getAuthority).collect(Collectors.joining(",")))
						.setIssuedAt(new Date())
						.setExpiration(new Date(new Date().getTime() + 30000000))
						.signWith(secretKey)
						.compact();
				response.setHeader(ApplicationConstatns.JWT_HEADER, jwt);
						
			}
		}
		filterChain.doFilter(request, response);
	}
	
	/*
	  	It checks if the request's path (URI) is exactly "/register/admin".
		If true, the filter will not be applied to this request.
		If false, the filter will be executed for the request.
	 */
	@Override
	protected boolean shouldNotFilter(HttpServletRequest request) throws ServletException {
		return request.getServletPath().equals("/register/admin");
	}

}
